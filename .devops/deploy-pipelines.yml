# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

#Create a unique name for the build based on your project requirements
#BuildID is the unique ID for the build
name: $(Year:yy).$(Month).$(DayOfMonth).$(BuildID)-$(SourceBranchName)

variables:
  AgentImage: "ubuntu-latest"
  BuildConfiguration: 'Release'
  azureSubscription: 'azuresub'
  dockerRegistryServiceConnection: 'fc6c9de1-c6d8-4dec-b092-d9d2323beb85'
  imageRepository: 'corporatesitebe'
  containerRegistry: 'ppareg.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  webAppName: 'webappname'
  tag: '$(Build.BuildId)'

stages:
- stage: 'Build_Stage'
  displayName: 'Build'
  jobs:
  - job: 'Build_Job'
    displayName: 'Application Build'
    pool:
      vmImage: $(AgentImage)
    steps:
    - task: DownloadSecureFile@1
      name: envFile
      inputs:
        secureFile: '.env'
  
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Agent.TempDirectory)'
        Contents: '$(envFile.secureFilePath)'
        TargetFolder: '$(Build.SourcesDirectory)'
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: 'Staging'
  displayName: 'Staging'
  dependsOn: ['Build_Stage']
  jobs:
  - deployment: Deploy_Staging
    displayName: Staging Deployment
    pool:
      vmImage: $(AgentImage)
    environment: Staging
    strategy:
      runOnce:
        deploy:
         steps:
         - task: AzureWebAppContainer@1
           inputs:
             appName: $(webAppName)
             azureSubscription: $(azureSubscription)
             imageName: '$(containerRegistry)/$(imageRepository):$(tag)'

# - stage: 'Production'
#   displayName: 'Production'
#   dependsOn: ['Build_Stage', 'Staging']
#   condition: eq(variables['Build.Reason'], 'Manual')
#   jobs:
#   - deployment: Deploy_Production
#     displayName: Production Deployment
#     pool:
#       vmImage: $(AgentImage)
#     environment: Production
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: current
#             artifact: 'app'
        
