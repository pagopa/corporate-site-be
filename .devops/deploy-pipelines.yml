# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

#Create a unique name for the build based on your project requirements
#BuildID is the unique ID for the build
name: $(Year:yy).$(Month).$(DayOfMonth).$(BuildID)-$(SourceBranchName)

parameters:
  - name: environment
    displayName: Target Environment
    type: string
    default: uat
    values:
      - uat
      - prod

variables:
  AGENT_IMAGE: "ubuntu-latest"
  DOCKERFILE_PATH: '$(Build.SourcesDirectory)/Dockerfile'
  TAG: '$(Build.BuildId)'
  ${{ if eq(parameters['environment'], 'uat') }}:
    DOCKER_REGISTRY_SERVICE_CONNECTION: '$(UAT_DOCKER_REGISTRY_SERVICE_CONNECTION)'
    IMAGE_REPOSITORY: '$(UAT_IMAGE_REPOSITORY)'
    CONTAINER_REGISTRY: '$(UAT_CONTAINER_REGISTRY)'
    WEBAPP_NAME: '$(UAT_WEBAPP_NAME)'
    AZURE_SUBSCRIPTION: $(UAT_AZURE_SUBSCRIPTION)
  ${{ if eq(parameters['environment'], 'prod') }}:
    DOCKER_REGISTRY_SERVICE_CONNECTION: '$(PROD_DOCKER_REGISTRY_SERVICE_CONNECTION)'
    IMAGE_REPOSITORY: '$(PROD_IMAGE_REPOSITORY)'
    CONTAINER_REGISTRY: '$(PROD_CONTAINER_REGISTRY)'
    WEBAPP_NAME: '$(PROD_WEBAPP_NAME)'
    AZURE_SUBSCRIPTION: '$(PROD_AZURE_SUBSCRIPTION)'

stages:
- stage: 'Build'
  displayName: 'Build'
  jobs:
  - job: 'Build_Job'
    displayName: 'Application Build'
    pool:
      vmImage: $(AGENT_IMAGE)
    steps:
    - task: DownloadSecureFile@1
      name: envFile
      inputs:
        secureFile: '.env'
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Agent.TempDirectory)'
        Contents: '$(envFile.secureFilePath)'
        TargetFolder: '$(Build.SourcesDirectory)'
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(IMAGE_REPOSITORY)
        dockerfile: $(DOCKERFILE_PATH)
        containerRegistry: $(DOCKER_REGISTRY_SERVICE_CONNECTION)
        tags: |
          $(Tag)

- stage: 'Deploy_to_${{parameters.environment}}'
  displayName: 'UAT'
  dependsOn: ['Build']
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(AGENT_IMAGE)
    environment: ${{parameters.environment}}
    strategy:
      runOnce:
        deploy:
         steps:
         - task: Bash@3
           inputs:
             targetType: 'inline'
             script: 'printenv'
         - task: AzureWebAppContainer@1
           inputs:
             appName: $(WEBAPP_NAME)
             azureSubscription: '$(AZURE_SUBSCRIPTION)'
             imageName: '$(CONTAINER_REGISTRY)/$(IMAGE_REPOSITORY):$(TAG)'
